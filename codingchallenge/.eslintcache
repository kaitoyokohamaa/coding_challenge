[{"/Users/yoko/Desktop/coding_challenge/codingchallenge/src/index.tsx":"1","/Users/yoko/Desktop/coding_challenge/codingchallenge/src/reportWebVitals.ts":"2","/Users/yoko/Desktop/coding_challenge/codingchallenge/src/App.tsx":"3","/Users/yoko/Desktop/coding_challenge/codingchallenge/src/Components/Pages/Home/index.tsx":"4","/Users/yoko/Desktop/coding_challenge/codingchallenge/src/Components/Organisms/Card/index.tsx":"5","/Users/yoko/Desktop/coding_challenge/codingchallenge/src/Components/Atoms/LikeButton/index.tsx":"6","/Users/yoko/Desktop/coding_challenge/codingchallenge/src/Components/Atoms/DislikeButton/index.tsx":"7","/Users/yoko/Desktop/coding_challenge/codingchallenge/src/Components/Organisms/MatchCard/index.tsx":"8"},{"size":500,"mtime":1608165502950,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1608165502952,"results":"11","hashOfConfig":"10"},{"size":369,"mtime":1608181492424,"results":"12","hashOfConfig":"10"},{"size":2805,"mtime":1608274673864,"results":"13","hashOfConfig":"10"},{"size":388,"mtime":1608190803017,"results":"14","hashOfConfig":"10"},{"size":708,"mtime":1608247029073,"results":"15","hashOfConfig":"10"},{"size":726,"mtime":1608272791302,"results":"16","hashOfConfig":"10"},{"size":349,"mtime":1608190206785,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1omul7x",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/yoko/Desktop/coding_challenge/codingchallenge/src/index.tsx",[],"/Users/yoko/Desktop/coding_challenge/codingchallenge/src/reportWebVitals.ts",[],"/Users/yoko/Desktop/coding_challenge/codingchallenge/src/App.tsx",["35"],"/Users/yoko/Desktop/coding_challenge/codingchallenge/src/Components/Pages/Home/index.tsx",["36"],"/Users/yoko/Desktop/coding_challenge/codingchallenge/src/Components/Organisms/Card/index.tsx",[],["37","38"],"/Users/yoko/Desktop/coding_challenge/codingchallenge/src/Components/Atoms/LikeButton/index.tsx",[],"/Users/yoko/Desktop/coding_challenge/codingchallenge/src/Components/Atoms/DislikeButton/index.tsx",[],"/Users/yoko/Desktop/coding_challenge/codingchallenge/src/Components/Organisms/MatchCard/index.tsx",[],{"ruleId":"39","severity":1,"message":"40","line":6,"column":3,"nodeType":"41","messageId":"42","endLine":6,"endColumn":11},{"ruleId":"43","severity":1,"message":"44","line":56,"column":9,"nodeType":"45","endLine":72,"endColumn":4,"suggestions":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","The 'clickHandler' function makes the dependencies of useEffect Hook (at line 80) change on every render. To fix this, wrap the definition of 'clickHandler' in its own useCallback() Hook.","VariableDeclarator",["51"],"no-native-reassign",["52"],"no-negated-in-lhs",["53"],{"desc":"54","fix":"55"},"no-global-assign","no-unsafe-negation","Wrap the definition of 'clickHandler' in its own useCallback() Hook.",{"range":"56","text":"57"},[1621,1996],"useCallback((i: number, type: string) => {\n    const currentNumber = i + 1;\n\n    if (type === \"like\") {\n      setIsLikeButtonClicked(true);\n    } else if (type === \"dislike\") {\n      setIsDisLikeButtonClicked(true);\n    }\n    // 次の画像に移るのをアニメーションが終わったらに\n    setTimeout(() => {\n      setIndex(currentNumber);\n    }, [1000]);\n\n    if (i > 3) {\n      alert(\"ユーザーがいません！リロードしてください\");\n    }\n  })"]